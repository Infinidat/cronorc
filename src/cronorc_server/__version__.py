__version__ = "0.post1"
__git_commiter_name__ = "Itai Shirav"
__git_commiter_email__ = "itais@infinidat.com"
__git_branch__ = 'develop'
__git_remote_tracking_branch__ = '(No remote tracking)'
__git_remote_url__ = '(Not remote tracking)'
__git_head_hash__ = 'a71df3d5d8f1952dab3e559f842daf540348d9be'
__git_head_subject__ = 'added all project files'
__git_head_message__ = ''
__git_dirty_diff__ = 'diff --git a/agent/src/cronorc.go b/agent/src/cronorc.go\ndeleted file mode 100644\nindex dce4c84..0000000\n--- a/agent/src/cronorc.go\n+++ /dev/null\n@@ -1,88 +0,0 @@\n-package main\n-\n-import (\n-\t"bytes"\n-\t"encoding/json"\n-\t"log"\n-\t"io/ioutil"\n-\t"net"\n-\t"net/http"\n-\t"os"\n-\t"os/exec"\n-\t"strings"\n-\t"time"\n-)\n-\n-const version = 1\n-\n-type Message struct {\n-\tVersion  int    `json:"version"`\n-\tCommand  string `json:"command"`\n-\tExitcode int    `json:"exitcode"`\n-\tStart    string `json:"start"`\n-\tElapsed  int64  `json:"elapsed"`\n-\tHostname string `json:"hostname"`\n-\tIP       string `json:"ip"`\n-}\n-\n-func main() {\n-\tif len(os.Args) < 2 {\n-\t\tlog.Fatal("Usage: cronorc <command> <arg1> <arg2>...")\n-\t}\n-\tprog := os.Args[1]\n-\targs := os.Args[2:]\n-\tcmd := exec.Command(prog, args...)\n-\tstart := time.Now()\n-\tcmd.CombinedOutput()\n-\tend := time.Now()\n-\thostname, _ := os.Hostname()\n-\tm := Message{\n-\t\tVersion:  version,\n-\t\tCommand:  strings.Join(os.Args[1:], " "),\n-\t\tExitcode: cmd.ProcessState.ExitCode(),\n-\t\tStart:    start.UTC().Format(time.RFC3339),\n-\t\tElapsed:  int64(end.Sub(start) / time.Millisecond),\n-\t\tHostname: hostname,\n-\t\tIP:       getLocalIP(),\n-\t}\n-\t// fmt.Printf("%%+v\\n", m)\n-\tsendMessage(m)\n-}\n-\n-// GetLocalIP returns the non loopback local IP of the host\n-func getLocalIP() string {\n-\taddrs, err := net.InterfaceAddrs()\n-\tif err != nil {\n-\t\treturn ""\n-\t}\n-\tfor _, address := range addrs {\n-\t\t// check the address type and if it is not a loopback the display it\n-\t\tif ipnet, ok := address.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {\n-\t\t\tif ipnet.IP.To4() != nil {\n-\t\t\t\treturn ipnet.IP.String()\n-\t\t\t}\n-\t\t}\n-\t}\n-\treturn ""\n-}\n-\n-// Posts the message to the URL pointed to by the CRONORC_URL env variable\n-func sendMessage(message Message) {\n-\turl := os.Getenv("CRONORC_URL")\n-\tif url == "" {\n-\t\tlog.Fatal("The CRONORC_URL environment variable is missing")\n-\t}\n-\tdata, json_err := json.Marshal(message)\n-\tif json_err != nil {\n-\t\tlog.Fatal(json_err)\n-\t}\n-\tresp, err := http.Post(url, "application/json", bytes.NewBuffer(data))\n-\tif err != nil {\n-\t\tlog.Fatal(err)\n-\t}\n-\tdefer resp.Body.Close()\n-\tioutil.ReadAll(resp.Body) // prevents "Connection reset by peer" errors on server\n-\tif resp.StatusCode != 200 {\n-\t\tlog.Fatal("Server responded: ", resp.Status)\n-\t}\n-}\ndiff --git a/buildout.cfg b/buildout.cfg\nindex 07d18a9..9b8c0d1 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -2,7 +2,7 @@\n prefer-final = false\n newest = false\n download-cache = .cache\n-develop = server\n+develop = .\n parts =\n \n [project]\n@@ -10,14 +10,14 @@ name = cronorc\n company = Infinidat\n namespace_packages = []\n install_requires = [\n-\t\'Django==3.0.2\',\n+\t\'Django==2.2.9\',\n \t\'gunicorn\',\n \t\'setuptools\'\n \t]\n-version_file = server/src/cronorc/__version__.py\n+version_file = src/cronorc_server/__version__.py\n description = Cron job monitoring\n long_description = Cron job monitoring\n-console_scripts = []\n+console_scripts = [\'manage = cronorc_server.scripts.manage:main\']\n gui_scripts = []\n package_data = []\n upgrade_code = {269398b6-3f58-11ea-ac16-448500edd465}\n@@ -32,7 +32,7 @@ version = v3.7.0.4\n [setup.py]\n recipe = infi.recipe.template.version\n input = setup.in\n-output = server/setup.py\n+output = setup.py\n \n [__version__.py]\n recipe = infi.recipe.template.version\ndiff --git a/server/src/cronorc/__init__.py b/server/src/cronorc/__init__.py\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/server/src/cronorc/__version__.py b/server/src/cronorc/__version__.py\ndeleted file mode 100644\nindex 8835f7e..0000000\n--- a/server/src/cronorc/__version__.py\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-__version__ = "0.post1"\n-__git_commiter_name__ = "Itai Shirav"\n-__git_commiter_email__ = "itais@infinidat.com"\n-__git_branch__ = \'develop\'\n-__git_remote_tracking_branch__ = \'(No remote tracking)\'\n-__git_remote_url__ = \'(Not remote tracking)\'\n-__git_head_hash__ = \'af1c13d391cbadea6c3a550c7b065337fbc149e3\'\n-__git_head_subject__ = \'added all project files\'\n-__git_head_message__ = \'\'\n-__git_dirty_diff__ = \'diff --git a/buildout.cfg b/buildout.cfg\\nindex 845e12d..07d18a9 100644\\n--- a/buildout.cfg\\n+++ b/buildout.cfg\\n@@ -2,7 +2,7 @@\\n prefer-final = false\\n newest = false\\n download-cache = .cache\\n-develop = .\\n+develop = server\\n parts =\\n \\n [project]\\n@@ -32,7 +32,7 @@ version = v3.7.0.4\\n [setup.py]\\n recipe = infi.recipe.template.version\\n input = setup.in\\n-output = setup.py\\n+output = server/setup.py\\n \\n [__version__.py]\\n recipe = infi.recipe.template.version\\n\'\n-__git_commit_date__ = \'2020-01-25 11:50:42\'\ndiff --git a/server/src/cronorc/asgi.py b/server/src/cronorc/asgi.py\ndeleted file mode 100644\nindex d416e9d..0000000\n--- a/server/src/cronorc/asgi.py\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-"""\n-ASGI config for cronorc project.\n-\n-It exposes the ASGI callable as a module-level variable named ``application``.\n-\n-For more information on this file, see\n-https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/\n-"""\n-\n-import os\n-\n-from django.core.asgi import get_asgi_application\n-\n-os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'cronorc.settings\')\n-\n-application = get_asgi_application()\ndiff --git a/server/src/cronorc/main/__init__.py b/server/src/cronorc/main/__init__.py\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/server/src/cronorc/main/admin.py b/server/src/cronorc/main/admin.py\ndeleted file mode 100644\nindex 912a1e0..0000000\n--- a/server/src/cronorc/main/admin.py\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-from django.contrib import admin\n-\n-from .models import Job, Execution\n-\n-class ExecutionAdmin(admin.ModelAdmin):\n-\n-    list_display = (\'job\', \'start\', \'elapsed\', \'exit_code\')\n-\n-\n-admin.site.register(Job)\n-admin.site.register(Execution, ExecutionAdmin)\ndiff --git a/server/src/cronorc/main/apps.py b/server/src/cronorc/main/apps.py\ndeleted file mode 100644\nindex 833bff6..0000000\n--- a/server/src/cronorc/main/apps.py\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-from django.apps import AppConfig\n-\n-\n-class MainConfig(AppConfig):\n-    name = \'main\'\ndiff --git a/server/src/cronorc/main/migrations/0001_initial.py b/server/src/cronorc/main/migrations/0001_initial.py\ndeleted file mode 100644\nindex 9d9f9aa..0000000\n--- a/server/src/cronorc/main/migrations/0001_initial.py\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-# Generated by Django 3.0.2 on 2020-01-24 23:11\n-\n-from django.db import migrations, models\n-import django.db.models.deletion\n-\n-\n-class Migration(migrations.Migration):\n-\n-    initial = True\n-\n-    dependencies = [\n-    ]\n-\n-    operations = [\n-        migrations.CreateModel(\n-            name=\'Job\',\n-            fields=[\n-                (\'id\', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name=\'ID\')),\n-                (\'hostname\', models.CharField(db_index=True, max_length=255)),\n-                (\'ip\', models.GenericIPAddressField()),\n-                (\'command\', models.TextField(db_index=True)),\n-            ],\n-            options={\n-                \'unique_together\': {(\'hostname\', \'ip\', \'command\')},\n-            },\n-        ),\n-        migrations.CreateModel(\n-            name=\'Execution\',\n-            fields=[\n-                (\'id\', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name=\'ID\')),\n-                (\'start\', models.DateTimeField()),\n-                (\'elapsed\', models.BigIntegerField()),\n-                (\'exit_code\', models.IntegerField()),\n-                (\'job\', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=\'main.Job\')),\n-            ],\n-        ),\n-    ]\ndiff --git a/server/src/cronorc/main/migrations/__init__.py b/server/src/cronorc/main/migrations/__init__.py\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/server/src/cronorc/main/models.py b/server/src/cronorc/main/models.py\ndeleted file mode 100644\nindex ecf4ccb..0000000\n--- a/server/src/cronorc/main/models.py\n+++ /dev/null\n@@ -1,24 +0,0 @@\n-from django.db import models\n-\n-\n-class Job(models.Model):\n-\n-    hostname = models.CharField(max_length=255, db_index=True)\n-    ip = models.GenericIPAddressField()\n-    command = models.TextField(db_index=True)\n-\n-    class Meta:\n-        unique_together = (\'hostname\', \'ip\', \'command\')\n-\n-    def __str__(self):\n-        cmd = self.command[:100] + \'...\' if len(self.command) > 100 else self.command\n-        return f\'{self.hostname} [{self.ip}] {cmd}\'\n-\n-\n-class Execution(models.Model):\n-\n-    job = models.ForeignKey(Job, on_delete=models.CASCADE)\n-    start = models.DateTimeField()\n-    elapsed = models.BigIntegerField()\n-    exit_code = models.IntegerField()\n-\ndiff --git a/server/src/cronorc/main/tests.py b/server/src/cronorc/main/tests.py\ndeleted file mode 100644\nindex 7ce503c..0000000\n--- a/server/src/cronorc/main/tests.py\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-from django.test import TestCase\n-\n-# Create your tests here.\ndiff --git a/server/src/cronorc/main/views.py b/server/src/cronorc/main/views.py\ndeleted file mode 100644\nindex 619cb27..0000000\n--- a/server/src/cronorc/main/views.py\n+++ /dev/null\n@@ -1,27 +0,0 @@\n-from django.shortcuts import render\n-from django.views.decorators.http import require_POST\n-from django.http import HttpResponse\n-from django.views.decorators.csrf import csrf_exempt\n-\n-import json\n-\n-from .models import Job, Execution\n-\n-\n-@require_POST\n-@csrf_exempt\n-def notify_view(request):\n-    message = json.loads(request.body)\n-    print(message)\n-    job, _ = Job.objects.get_or_create(\n-        hostname=message[\'hostname\'],\n-        ip=message[\'ip\'],\n-        command=message[\'command\']\n-    )\n-    Execution.objects.create(\n-        job=job,\n-        start=message[\'start\'],\n-        elapsed=message[\'elapsed\'],\n-        exit_code=message[\'exitcode\']\n-    )\n-    return HttpResponse(\'{}\', content_type=\'application/json\')\ndiff --git a/server/src/cronorc/settings.py b/server/src/cronorc/settings.py\ndeleted file mode 100644\nindex 5263206..0000000\n--- a/server/src/cronorc/settings.py\n+++ /dev/null\n@@ -1,121 +0,0 @@\n-"""\n-Django settings for cronorc project.\n-\n-Generated by \'django-admin startproject\' using Django 3.0.2.\n-\n-For more information on this file, see\n-https://docs.djangoproject.com/en/3.0/topics/settings/\n-\n-For the full list of settings and their values, see\n-https://docs.djangoproject.com/en/3.0/ref/settings/\n-"""\n-\n-import os\n-\n-# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n-BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n-\n-\n-# Quick-start development settings - unsuitable for production\n-# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n-\n-# SECURITY WARNING: keep the secret key used in production secret!\n-SECRET_KEY = \'p!#fjwv&s9zw+3=fkc5%%5v)f2&of47yc&58msmvfogipi($r$g\'\n-\n-# SECURITY WARNING: don\'t run with debug turned on in production!\n-DEBUG = True\n-\n-ALLOWED_HOSTS = []\n-\n-\n-# Application definition\n-\n-INSTALLED_APPS = [\n-    \'django.contrib.admin\',\n-    \'django.contrib.auth\',\n-    \'django.contrib.contenttypes\',\n-    \'django.contrib.sessions\',\n-    \'django.contrib.messages\',\n-    \'django.contrib.staticfiles\',\n-    \'cronorc.main\'\n-]\n-\n-MIDDLEWARE = [\n-    \'django.middleware.security.SecurityMiddleware\',\n-    \'django.contrib.sessions.middleware.SessionMiddleware\',\n-    \'django.middleware.common.CommonMiddleware\',\n-    \'django.middleware.csrf.CsrfViewMiddleware\',\n-    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\n-    \'django.contrib.messages.middleware.MessageMiddleware\',\n-    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n-]\n-\n-ROOT_URLCONF = \'cronorc.urls\'\n-\n-TEMPLATES = [\n-    {\n-        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n-        \'DIRS\': [],\n-        \'APP_DIRS\': True,\n-        \'OPTIONS\': {\n-            \'context_processors\': [\n-                \'django.template.context_processors.debug\',\n-                \'django.template.context_processors.request\',\n-                \'django.contrib.auth.context_processors.auth\',\n-                \'django.contrib.messages.context_processors.messages\',\n-            ],\n-        },\n-    },\n-]\n-\n-WSGI_APPLICATION = \'cronorc.wsgi.application\'\n-\n-\n-# Database\n-# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n-\n-DATABASES = {\n-    \'default\': {\n-        \'ENGINE\': \'django.db.backends.sqlite3\',\n-        \'NAME\': os.path.join(BASE_DIR, \'db.sqlite3\'),\n-    }\n-}\n-\n-\n-# Password validation\n-# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n-\n-AUTH_PASSWORD_VALIDATORS = [\n-    {\n-        \'NAME\': \'django.contrib.auth.password_validation.UserAttributeSimilarityValidator\',\n-    },\n-    {\n-        \'NAME\': \'django.contrib.auth.password_validation.MinimumLengthValidator\',\n-    },\n-    {\n-        \'NAME\': \'django.contrib.auth.password_validation.CommonPasswordValidator\',\n-    },\n-    {\n-        \'NAME\': \'django.contrib.auth.password_validation.NumericPasswordValidator\',\n-    },\n-]\n-\n-\n-# Internationalization\n-# https://docs.djangoproject.com/en/3.0/topics/i18n/\n-\n-LANGUAGE_CODE = \'en-us\'\n-\n-TIME_ZONE = \'UTC\'\n-\n-USE_I18N = True\n-\n-USE_L10N = True\n-\n-USE_TZ = True\n-\n-\n-# Static files (CSS, JavaScript, Images)\n-# https://docs.djangoproject.com/en/3.0/howto/static-files/\n-\n-STATIC_URL = \'/static/\'\ndiff --git a/server/src/cronorc/urls.py b/server/src/cronorc/urls.py\ndeleted file mode 100644\nindex e49099d..0000000\n--- a/server/src/cronorc/urls.py\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-"""cronorc URL Configuration\n-\n-The `urlpatterns` list routes URLs to views. For more information please see:\n-    https://docs.djangoproject.com/en/3.0/topics/http/urls/\n-Examples:\n-Function views\n-    1. Add an import:  from my_app import views\n-    2. Add a URL to urlpatterns:  path(\'\', views.home, name=\'home\')\n-Class-based views\n-    1. Add an import:  from other_app.views import Home\n-    2. Add a URL to urlpatterns:  path(\'\', Home.as_view(), name=\'home\')\n-Including another URLconf\n-    1. Import the include() function: from django.urls import include, path\n-    2. Add a URL to urlpatterns:  path(\'blog/\', include(\'blog.urls\'))\n-"""\n-from django.contrib import admin\n-from django.urls import path\n-from cronorc.main.views import notify_view\n-\n-admin.autodiscover()\n-\n-urlpatterns = [\n-    path(\'admin/\', admin.site.urls),\n-    path(\'notify/\', notify_view),\n-]\ndiff --git a/server/src/cronorc/wsgi.py b/server/src/cronorc/wsgi.py\ndeleted file mode 100644\nindex eb2ef86..0000000\n--- a/server/src/cronorc/wsgi.py\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-"""\n-WSGI config for cronorc project.\n-\n-It exposes the WSGI callable as a module-level variable named ``application``.\n-\n-For more information on this file, see\n-https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/\n-"""\n-\n-import os\n-\n-from django.core.wsgi import get_wsgi_application\n-\n-os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'cronorc.settings\')\n-\n-application = get_wsgi_application()\ndiff --git a/server/src/manage.py b/server/src/manage.py\ndeleted file mode 100755\nindex 633de12..0000000\n--- a/server/src/manage.py\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-#!/usr/bin/env python\n-"""Django\'s command-line utility for administrative tasks."""\n-import os\n-import sys\n-\n-\n-def main():\n-    os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'cronorc.settings\')\n-    try:\n-        from django.core.management import execute_from_command_line\n-    except ImportError as exc:\n-        raise ImportError(\n-            "Couldn\'t import Django. Are you sure it\'s installed and "\n-            "available on your PYTHONPATH environment variable? Did you "\n-            "forget to activate a virtual environment?"\n-        ) from exc\n-    execute_from_command_line(sys.argv)\n-\n-\n-if __name__ == \'__main__\':\n-    main()\n'
__git_commit_date__ = '2020-01-25 11:50:42'
